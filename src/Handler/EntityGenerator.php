<?php

namespace EntityGenerator\Handler;

use EntityGenerator\Type\PropertyRequisite;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\Property;
use Nette\PhpGenerator\PhpNamespace;
use EntityGenerator\Component\StringProcessor;
use Nette\PhpGenerator\Type;

/**
 * @author Mounir Mouih <mounir.mouih@gmail.com>
 */
class EntityGenerator
{
    private array $generatedFiles = [];

    public function __construct(private StringProcessor $stringProcessor, private array $parameters)
    {
    }

    /**
     * @return array<PhpFile>
     */
    public function generate(string $className, array $schema): array
    {
        $this->generatedFiles = [];
        $this->generateRecurisivly($className, $schema);

        return $this->generatedFiles;
    }

    private function generateRecurisivly(string $className, array $schema): string
    {
        $namespace = new PhpNamespace($this->parameters['namespace']);
        $class = $namespace->addClass($className);
        $class->addComment('Autogenerated Entity');

        foreach ($schema as $propertyName => $definition) {
            $this->generateProperty(
                new PropertyRequisite($class, $definition, $namespace, $propertyName)
            );
        }

        $phpFile = new PhpFile();
        $phpFile->addNamespace($namespace);

        $this->generatedFiles[$className] = $phpFile;

        return $className;
    }

    private function generateProperty(PropertyRequisite $propertyRequisite): void
    {
        $property = new Property($this->stringProcessor->toCamelCase($propertyRequisite->propertyName));
        $property->setPublic();
        if ($propertyRequisite->definition->hasSchema()) {
            $this->defineNoneScalarTypes($property, $propertyRequisite);
        } else {
            $this->defineAtomicTypes($property, $propertyRequisite->definition->type);
        }

        $propertyRequisite->class->addMember($property);
    }

    private function defineNoneScalarTypes(Property $property, PropertyRequisite $propertyRequisite): void
    {
        $definition = $propertyRequisite->definition;
        if ($definition->isIterable()) {
            $schemaType = $this->generateRecurisivly(
                $this->stringProcessor->normalizeClassName($property->getName(), true),
                $definition->schema
            );
            $this->defineCollectionTypes($property, $schemaType);
        } else {
            $schemaType = $this->generateRecurisivly(
                $this->stringProcessor->normalizeClassName($property->getName()),
                $definition->schema
            );
            if (true === $this->parameters['property.type']) {
                // todo: loading the proper type right from the start could be a good idea !
                $type = sprintf('%s\%s', $propertyRequisite->namespace->getName(), $schemaType);
            } else {
                $type = $schemaType;
            }

            $this->defineAtomicTypes($property, $type);
        }
    }

    private function defineAtomicTypes(Property $property, string $type): void
    {
        $property->setNullable(true);
        if (true === $this->parameters['property.type']) {
            $property->setType($type);
        }

        if (true === $this->parameters['property.phpdoc']) {
            $property->addComment(sprintf('@var %s', $type));
        }
    }

    private function defineCollectionTypes(Property $property, string $schemaType): void
    {
        $property->setValue([]);
        if (true === $this->parameters['property.type']) {
            $property->setType(TYPE::Iterable);
        }

        if (true === $this->parameters['property.phpdoc']) {
            $property->addComment(sprintf('@var %s<%s>', TYPE::Iterable, $schemaType));
        }
    }
}
