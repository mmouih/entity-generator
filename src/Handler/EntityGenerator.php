<?php

namespace EntityGenerator\Handler;

use EntityGenerator\Type\PropertyRequisite;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\Property;
use Nette\PhpGenerator\PhpNamespace;
use EntityGenerator\Component\StringProcessor;
use Nette\PhpGenerator\Type;

/**
 * @author Mounir Mouih <mounir.mouih@gmail.com>
 */
class EntityGenerator
{
    private array $generatedFiles = [];

    public function __construct(private StringProcessor $stringProcessor, private array $parameters)
    {
    }

    /**
     * @return array<PhpFile>
     */
    public function generate(string $className, array $schema): array
    {
        $this->generatedFiles = [];
        $this->generateRecurisivly($className, $schema);

        return $this->generatedFiles;
    }

    private function generateRecurisivly(string $className, array $schema): string
    {
        $namespace = new PhpNamespace($this->parameters['default_namespace']);
        $class = $namespace->addClass($className);
        $class->addComment('Autogenerated Entity');

        foreach ($schema as $propertyName => $definition) {
            $this->generateProperty(
                new PropertyRequisite($class, $definition, $namespace, $propertyName)
            );
        }

        $phpFile = new PhpFile();
        $phpFile->addNamespace($namespace);

        $this->generatedFiles[$className] = $phpFile;

        return $className;
    }

    private function generateProperty(PropertyRequisite $PropertyRequisite): void
    {
        $property = new Property($this->stringProcessor->toCamelCase($PropertyRequisite->propertyName));
        $property->setPublic();
        if ($PropertyRequisite->definition->hasSchema()) {
            $this->handleNoneScalarTypes($property, $PropertyRequisite);
        } else {
            $this->defineAtomicTypes($property, $PropertyRequisite->definition->type);
        }

        $PropertyRequisite->class->addMember($property);
    }

    private function handleNoneScalarTypes(Property $property, PropertyRequisite $PropertyRequisite): void
    {
        $definition = $PropertyRequisite->definition;
        if ($definition->isIterable()) {
            $schemaType = $this->generateRecurisivly($this->stringProcessor->normalizeClassName($property->getName(), true), $definition->schema);
            $this->defineCollectionTypes($property, $schemaType);
        } else {
            $schemaType = $this->generateRecurisivly($this->stringProcessor->normalizeClassName($property->getName()), $definition->schema);
            $this->defineAtomicTypes($property, sprintf('%s\%s', $PropertyRequisite->namespace->getName(), $schemaType));
        }
    }

    private function defineAtomicTypes(Property $property, string $type): void
    {
        $property->setType($type);
        $property->setNullable(true);
    }

    private function defineCollectionTypes(Property $property, string $schemaType): void
    {
        $property->setValue([]);
        $property->setType(TYPE::Iterable);
        $property->addComment(sprintf('@var %s<%s>', TYPE::Iterable, $schemaType));
    }
}
